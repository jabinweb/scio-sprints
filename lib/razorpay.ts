declare global {
  interface Window {
    Razorpay: any;
  }
}

interface RazorpayOptions {
  key: string;
  amount: number;
  currency: string;
  name: string;
  description: string;
  order_id: string;
  prefill?: {
    email?: string;
    contact?: string;
  };
  notes: {
    userId: string;
  };
  handler: (response: any) => void;
}

export const loadRazorpayScript = () => {
  return new Promise((resolve) => {
    const script = document.createElement('script');
    script.src = 'https://checkout.razorpay.com/v1/checkout.js';
    script.onload = resolve;
    document.body.appendChild(script);
  });
};

export const initializeRazorpay = async (options: any) => {
  await loadRazorpayScript();
  const razorpay = new window.Razorpay({
    key: process.env.NEXT_PUBLIC_RAZORPAY_KEY_ID,
    ...options,
  });
  return razorpay;
};

export const createPaymentSession = async (userId: string, email?: string) => {
  const options: RazorpayOptions = {
    key: process.env.NEXT_PUBLIC_RAZORPAY_KEY_ID!,
    amount: 89600, // â‚¹896 in paise
    currency: "INR",
    name: "ScioLabs",
    description: "Premium Dashboard Access",
    order_id: "", // Will be generated by your backend
    prefill: {
      email,
    },
    notes: {
      userId
    },
    handler: function (response) {
      // Verify payment on your backend
      verifyPayment(response);
    },
  };

  const razorpay = await initializeRazorpay(options);
  razorpay.open();
};

const verifyPayment = async (response: any) => {
  try {
    const res = await fetch('/api/payment/verify', {
      method: 'POST',
      body: JSON.stringify(response)
    });
    if (!res.ok) throw new Error('Payment verification failed');
    window.location.href = '/dashboard';
  } catch (error) {
    console.error('Payment verification error:', error);
  }
};
